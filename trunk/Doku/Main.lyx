#LyX 1.6.6.1 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass scrartcl
\use_default_options true
\language ngerman
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder false
\pdf_colorlinks false
\pdf_backref false
\pdf_pdfusetitle true
\papersize a4paper
\use_geometry false
\use_amsmath 1
\use_esint 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Einführung und Grundlagen
\end_layout

\begin_layout Subsection
Einleitung und Aufgabenstellung
\begin_inset Note Note
status open

\begin_layout Plain Layout
?
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Im Laufe des Studiums erfährt jeder Student der Informatik Grundlagen der
 Programmiertechnik.
 In dem Praktikum -welches dieser Dokumentation zu Grunde liegt- wurden
 die Grundlagen in der Praxis an einem nicht trivialem Projekt angewandt.
\end_layout

\begin_layout Standard
Dieses Projekt beschäftigt sich mit der Beschleunigung von Reed-Solomon-Codes
 (RS-Codes) auf einer GPU und einem FPGA.
 Um den Umfang der Implementierungen übersichtlicher zu halten, haben sich
 alle Gruppen auf AES als RS-Code verständigt.
\end_layout

\begin_layout Standard
Diese Dokumentation befasst sich mit der Beschleunigung von AES auf einer
 GPU.
 
\end_layout

\begin_layout Subsection
Grundlagen
\end_layout

\begin_layout Subsubsection
AES im Kurzüberblick
\begin_inset Note Note
status open

\begin_layout Plain Layout
Ibi
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Der Advanced Encryption Standard (AES) ist ein symmetrisches Kryptosystem.
 Es wurde von Joan Daemen und Vincent Rijmen im Rahmen eines international
 ausgeschriebenen Wettbewerbes des National Institute of Standards and Technolog
y (NIST) entwickelt.
 Als Nachfolger von DES und 3DES, gilt AES seit 2000 als De-facto Verschlüsselun
gsstandard, welcher Dank seiner starken Verschlüsselung selbst höchsten
 Sicherheitsansprüchen genügt.
\end_layout

\begin_layout Standard
Bei AES handelt es sich um ein Blockverschlüsselungssystem, auch Blockchiffre
 genannt, also ein Verschlüsselungsverfahren, bei dem der Klartext in eine
 Folge gleichgroßer Blöcke zerlegt wird.
 Diese Blöcke werden anschließend unabhängig voneinander mit einem aus einem
 Schlüsselwort berechneten Blockschlüssel chiffriert.
 Somit werden auch Chiffretextblöcke mit einer festen Länge erzeugt und
 letzendlich zum endgültigen Chiffretext aneinandergereiht.
 
\end_layout

\begin_layout Standard
AES schränkt die Blocklänge auf 128 Bit ein.
 Die Schlüssellänge kann jedoch zwischen 128, 192 und 256 Bit gewählt werden,
 weshalb zwischen den drei AES-Varianten AES-128, AES-192 und AES-256 unterschie
den wird.
 AES bietet ein sehr hohes Maß an Sicherheit und ist in den USA sogar für
 staatliche Dokumente mit höchster Geheimhaltungsstufe zugelassen.
 Der Algorithmus ist frei verfügbar und darf ohne Lizenzgebühren eingesetzt
 sowie in Software bzw.
 Hardware implementiert werden.
\end_layout

\begin_layout Subsubsection
CUDA Framework
\begin_inset Note Note
status open

\begin_layout Plain Layout
Krüger
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Das „Compute Unified Device Architecture Software Developer Kit“ (CUDA SDK)
 wurde von NVIDA am 15.
 Februar 2007 erstmals der Öffentlichkeit vorgestellt.
 Intention dieses SDKs ist, die Programmierung aktueller Grafikkarten unter
 einer einheitlichen und standardisierten Schnittstelle zu ermöglichen.
\end_layout

\begin_layout Standard
Die Architektur moderner GPUs ist aufgrund ihrer Geschichte als reine Berechnung
seinheit für Bildschirmausgaben für den Zweck ausgelegt, Operationen parallel
 auszuführen.
 Als Co-Prozessor können GPUs somit Dank der CUDA-API dazu genutzt werden,
 bestimmte Programmteile signifikat schneller abzuarbeiten.
\end_layout

\begin_layout Standard
CUDA basiert auf einer optimierten Variante von C (
\begin_inset Quotes eld
\end_inset

C for CUDA
\begin_inset Quotes erd
\end_inset

) und ist damit weitestgehend plattformunabhängig.
 So ist es möglich, CUDA-Anwendungen unter Windows, Linux und Mac OS X auszuführ
en - eine kompatible Grafikkarte vorausgesetzt.
\end_layout

\begin_layout Section
GPU Architektur
\begin_inset Note Note
status open

\begin_layout Plain Layout
Krüger
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Architektur
\end_layout

\begin_layout Subsubsection
Prozessoraufbau
\end_layout

\begin_layout Standard
Moderne Grafikarten sind über die PCI-E Schnittstelle an die CPU angebunden.
 Über diesen Bus werden die Daten und Prozesse an die berechnenden Einheiten
 der GPU übertragen.
\end_layout

\begin_layout Standard
Im Folgenden ist die Architektur der GPU abgebildet.
 Hierbei ist zu beachten, dass die Anzahl der Multiprozessoren auf der GPU,
 sowie die Anzahl der Streaming-Prozessoren (SP) je nach Modell unterschiedlich
 sind.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename img/GPU-Architecture.png
	width 16.5cm

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:GPU-Architecture-Overview"

\end_inset

GPU-Architecture
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Multithreaded Instruction Unit (MT IU)
\end_layout

\begin_layout Standard
Die MT IU verwaltet die Ausführung von Threads auf dem Multiprocessor.
 Hierbei werden einzelne Threads zu einem Block, mehrere Blöcke zu einem
 Grid zusammengefasst.
\end_layout

\begin_layout Subsubsection
Streaming Multiprocessor
\end_layout

\begin_layout Standard
Auf jeden Streaming Multiprocessor wird genau ein Block abgebildet.
 Die in dem Block befindlichen Threads werden -soweit möglich- parallel
 abgearbeitet.
 Hierbei hat jeder Thread in dem Block eine eindeutige ID, auf welche auch
 in dem Thread zugegriffen werden kann.
\end_layout

\begin_layout Subsubsection
Streaming Processor (SP)
\end_layout

\begin_layout Standard
Jeder SP führt genau einen Tread aus.
 
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename img/GPU-Architecture_Grid_and_Blocks.png
	width 16.5cm

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Streaming Processor
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Speicherhierarchie 
\begin_inset Note Note
status open

\begin_layout Plain Layout
UNBEDINGT auf Richtigkeit ueberpruefen!!
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Global Memory 
\end_layout

\begin_layout Standard
Der Global Memory (RAM) ist der Größte Bereich und sowohl von CPU als auch
 von der GPU schreib- und lesbar.
 Dieser Speicher ermöglicht den Austausch von Daten zwischen GPU und CPU.
 Dieser Speicher hat die größte Kapazität, ist jedoch der langsamste der
 Speicherhierarchie bezüglich der GPU.
 
\end_layout

\begin_layout Subsubsection
Constant Memory
\end_layout

\begin_layout Standard
Der Constant Memory ist physikalisch auf 64KB beschränkt.
\end_layout

\begin_layout Subsubsection
Register
\end_layout

\begin_layout Standard
Threads eines Bocks teilen sich gemeinsame Register.
\end_layout

\begin_layout Subsubsection*
Shared Memory
\end_layout

\begin_layout Standard
Für jeden Streaming-Multiprozessor-Prozessor ist ein Shared Memory vorgesehen,
 welches der schnellste -mit 16 KB jedoch auch der kleinste- Speicher in
 der Hierarchie der GPU ist.
 Der Multiprozessor teilt diesen verfügbaren Speicher und seinen Streamingprozes
soren auf.
 Dieser Speicher kann nur von der GPU gelesen und geschrieben werden.
 
\end_layout

\begin_layout Section
Implementierung
\end_layout

\begin_layout Subsection
Funktionen im Detail
\begin_inset Note Note
status open

\begin_layout Plain Layout
Ibi
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Galois-Feld-Theorie etc.
\end_layout

\begin_layout Subsubsection
MixColumn-Funktion
\end_layout

\begin_layout Subsubsection
Substitutionsbox
\end_layout

\begin_layout Subsubsection
ShiftRow-Funktion
\begin_inset Note Note
status open

\begin_layout Plain Layout
Ibi
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
CUDA-spezifische Veränderungen
\begin_inset Note Note
status open

\begin_layout Plain Layout
Simon
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Prozessaufteilung
\end_layout

\begin_layout Subsubsection
Speichernutzung
\end_layout

\begin_layout Section
Tests und Benchmarks
\begin_inset Note Note
status open

\begin_layout Plain Layout
Vermutlich Simon
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Testumgebung
\end_layout

\begin_layout Subsection
Ergebnisse
\end_layout

\begin_layout Section
Ausblick
\begin_inset Note Note
status open

\begin_layout Plain Layout
?
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\end_layout

\end_body
\end_document
