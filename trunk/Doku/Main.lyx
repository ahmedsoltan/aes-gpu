#LyX 1.6.6.1 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass scrartcl
\use_default_options true
\language ngerman
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize a4paper
\use_geometry false
\use_amsmath 1
\use_esint 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Section
Einführung und Grundlagen
\end_layout

\begin_layout Subsection
Aufgabenstellung
\begin_inset Note Note
status open

\begin_layout Plain Layout
?
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Grundlagen
\end_layout

\begin_layout Subsubsection
AES im Kurzüberblick
\begin_inset Note Note
status open

\begin_layout Plain Layout
Ibi
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
CUDA Framework
\begin_inset Note Note
status open

\begin_layout Plain Layout
Krüger
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Standard Das „Compute Unified Device Architecture Software Developer Kit“
 (CUDA SDK) wurde von NVIDA am 15.
 Februar 2007 das erste mal der Öffentlichkeit vorgestellt.
 Ziel dieses SDKs ist es, eine parallele Ausführung von Code auf unterstützten
 Grafikkarten.
 Zur Zeit sind das die aktuellen Grafikkarten, welche mit einem GeForce,
 ION, Quadro oder Tesla Grafikprozessor ausgestattet sind.
 
\end_layout

\begin_layout Standard
Standard CUDA basiert auf eine abgewandelten Variante von C.
 Typischerweise wird bei CUDA Anwendungen die Busbandweite und Latenz zwischen
 CPU und GPU zum Engpass.
 Darüber hinaus erreicht man die optimale Geschwindigkeit nur, wenn man
 die Implementierung an die Hardware anpasst (z.B.
 sollte die Anzahl der parallellaufenden Threads gleich die Anzahl der Streaming
 -Prozessoren sein).
\end_layout

\begin_layout Standard
Standard CUDA ist weitestgehend plattformunabhängig.
 So ist es möglich, „CUDA-Programme“ auf Windows, Linux und Mac OSX auszuführen
 - eine kompatible Grafikkarte vorausgesetzt.
\end_layout

\begin_layout Section
GPU Architektur
\begin_inset Note Note
status open

\begin_layout Plain Layout
Krüger
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Historie
\end_layout

\begin_layout Standard
Ursprünglich war es die einzige Aufgabe einer Grafikkarte, ein Bild auf
 einem Anzeigegerät (wie z.B.
 einem Monitor) darzustellen.
 Im Laufe der Geschichte haben sie sich in programmierbare Prozessoren entwickel
t.
 Aufgrund ihrer Geschichte aus der Grafikberechnung, sind Grafikarten in
 der Lage, sehr viele Operationen parallel zu berechnen.
 Wie genau das von statten geht, wir im Kapitel der Architektur erwähnt.
 Durch Ausnutzen der Parallelität der Grafikkarte in Berechnungen kann gegenüber
 der Berechnung mit der CPU schneller berechnet werden.
\end_layout

\begin_layout Subsection
Architektur
\end_layout

\begin_layout Subsubsection
Prozessoraufbau
\end_layout

\begin_layout Standard
Moderne Grafikarten sind über die PCI-E Schnittstelle an die CPU angebunden.
 Über diesen Bus werden die Daten und Prozesse an die berechnenden Einheiten
 der GPU übertragen.
\end_layout

\begin_layout Standard
Im Folgenden ist die Architektur der GPU abgebildet.
 Hierbei ist zu beachten, dass die Anzahl der Multiprozessoren auf der GPU,
 sowie die Anzahl der Streaming-Prozessoren (SP) je nach Modell unterschiedlich
 sind.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename img/GPU-Architecture.png
	width 16.5cm

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:GPU-Architecture-Overview"

\end_inset

GPU-Architecture
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Multithreaded Instruction Unit (MT IU)
\end_layout

\begin_layout Standard
Die MT IU verwaltet die Ausführung von Threads auf dem Multiprocessor.
 Hierbei werden einzelne Threads zu einem Block, mehrere Blöcke zu einem
 Grid zusammengefasst.
\end_layout

\begin_layout Subsubsection
Streaming Multiprocessor
\end_layout

\begin_layout Standard
Auf jeden Streaming Multiprocessor wird genau ein Block abgebildet.
 Die in dem Block befindlichen Threads werden -soweit möglich- parallel
 abgearbeitet.
 Hierbei hat jeder Thread in dem Block eine eindeutige ID, auf welche auch
 in dem Thread zugegriffen werden kann.
\end_layout

\begin_layout Subsubsection
Streaming Processor (SP)
\end_layout

\begin_layout Standard
Jeder SP führt genau einen Tread aus.
 
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename img/GPU-Architecture_Grid_and_Blocks.png
	width 16.5cm

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Streaming Processor
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Speicherhierarchie 
\begin_inset Note Note
status open

\begin_layout Plain Layout
UNBEDINGT auf Richtigkeit ueberpruefen!!
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Global Memory 
\end_layout

\begin_layout Standard
Der Global Memory (RAM) ist der Größte Bereich und sowohl von CPU als auch
 von der GPU schreib- und lesbar.
 Dieser Speicher ermöglicht den Austausch von Daten zwischen GPU und CPU.
 Dieser Speicher hat die größte Kapazität, ist jedoch der langsamste der
 Speicherhierarchie bezüglich der GPU.
 
\end_layout

\begin_layout Subsubsection
Constant Memory
\end_layout

\begin_layout Standard
Der Constant Memory ist physikalisch auf 64KB beschränkt.
\end_layout

\begin_layout Subsubsection
Register
\end_layout

\begin_layout Standard
Threads eines Bocks teilen sich gemeinsame Register.
\end_layout

\begin_layout Subsubsection*
Shared Memory
\end_layout

\begin_layout Standard
Für jeden Streaming-Multiprozessor-Prozessor ist ein Shared Memory vorgesehen,
 welches der schnellste -mit 16 KB jedoch auch der kleinste- Speicher in
 der Hierarchie der GPU ist.
 Der Multiprozessor teilt diesen verfügbaren Speicher und seinen Streamingprozes
soren auf.
 Dieser Speicher kann nur von der GPU gelesen und geschrieben werden.
 
\end_layout

\begin_layout Section
Implementierung
\end_layout

\begin_layout Subsection
Funktionen im Detail
\begin_inset Note Note
status open

\begin_layout Plain Layout
Ibi
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Galois-Feld-Theorie etc.
\end_layout

\begin_layout Subsubsection
MixColumn-Funktion
\end_layout

\begin_layout Subsubsection
Substitutionsbox
\end_layout

\begin_layout Subsubsection
ShiftRow-Funktion
\begin_inset Note Note
status open

\begin_layout Plain Layout
Ibi
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
CUDA-spezifische Veränderungen
\begin_inset Note Note
status open

\begin_layout Plain Layout
Simon
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Prozessaufteilung
\end_layout

\begin_layout Subsubsection
Speichernutzung
\end_layout

\begin_layout Section
Tests und Benchmarks
\begin_inset Note Note
status open

\begin_layout Plain Layout
Vermutlich Simon
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Testumgebung
\end_layout

\begin_layout Subsection
Ergebnisse
\end_layout

\begin_layout Section
Ausblick
\begin_inset Note Note
status open

\begin_layout Plain Layout
?
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\end_layout

\end_body
\end_document
